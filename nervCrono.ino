#define __DEBUG__

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Definir constantes
#define ANCHO_PANTALLA 128 // ancho pantalla OLED
#define ALTO_PANTALLA 64 // alto pantalla OLED

// Objeto de la clase Adafruit_SSD1306
Adafruit_SSD1306 display(ANCHO_PANTALLA, ALTO_PANTALLA, &Wire, -1);


// Temporizador
unsigned long marcaTiempoDate = 0;
unsigned long tiempoRefreshDate = 1000;
 
// Variables almacena tiempo millis
int dias;
int horas;
int minutos;
int segundos;

int pulsos;
 
// Cadena para almacenar texto formateado
char cadenaTiempo[16];
 
/*
  Función que convierte millis() a segundos, minutos, horas y días
  Almacena la información en variables globales
*/
void millisToTiempo(unsigned long valMillis) {
  // Se obtienen los segundos
  valMillis = valMillis / 1000;
 
  segundos = valMillis % 60; // se divide entre segundos por minuto y te quedas con el resto
  minutos = valMillis / 60; // Se convierte a minutos
  minutos = minutos % 60; // se divide entre minutos por hora y te quedas con el resto
  horas = (valMillis / 60) / 60; // Se convierte en horas
  horas = horas % 24; // se divide entre horas al día y te quedas con el resto
  dias = ((valMillis / 60) / 60) / 24; // Se convierte en días
#ifdef __DEBUG__
  Serial.print("Segundos = ");
  Serial.println(valMillis);
  Serial.print(dias);
  Serial.print(":");
  Serial.print(horas);
  Serial.print(":");
  Serial.print(minutos);
  Serial.print(":");
  Serial.println(segundos);
#endif
}
 

static const unsigned char PROGMEM datos_imagen[276] = {
    0x00, 0x00, 0x00, 0x02, 0x50, 0x00, 
    0x00, 0x00, 0x00, 0xbd, 0xa8, 0x00, 
    0x00, 0x00, 0x03, 0x56, 0xf0, 0x00, 
    0x00, 0x00, 0x05, 0xeb, 0x50, 0x00, 
    0x00, 0x00, 0x05, 0x5d, 0xb0, 0x00, 
    0x00, 0x00, 0x06, 0xea, 0xdd, 0x00, 
    0x00, 0x40, 0x05, 0xb7, 0x6b, 0x40, 
    0x00, 0x40, 0x06, 0xda, 0xb5, 0xa0, 
    0x00, 0x30, 0x0b, 0x6d, 0xde, 0xf0, 
    0x00, 0x10, 0x06, 0xb6, 0xab, 0x58, 
    0x00, 0x08, 0x0b, 0xdb, 0xf5, 0xac, 
    0x00, 0x04, 0x0d, 0x55, 0x2e, 0xd4, 
    0x00, 0x02, 0x1b, 0x7e, 0xf5, 0x7b, 
    0x00, 0x01, 0x6d, 0xa5, 0xaf, 0xad, 
    0x00, 0x00, 0xd6, 0xde, 0xd4, 0xd4, 
    0x00, 0x00, 0x7b, 0x6b, 0x7b, 0x78, 
    0x00, 0x00, 0x55, 0xb5, 0xa5, 0x80, 
    0x60, 0x31, 0xae, 0xde, 0xa8, 0x00, 
    0x30, 0x10, 0x95, 0x6b, 0x70, 0x00, 
    0x18, 0x00, 0x8b, 0xb5, 0xae, 0x80, 
    0x24, 0x20, 0xc5, 0x5e, 0xdb, 0x00, 
    0x06, 0x10, 0x82, 0xeb, 0x6d, 0xc0, 
    0x22, 0x00, 0xa5, 0xb5, 0xb6, 0x80, 
    0x23, 0x20, 0x92, 0x5e, 0xdb, 0x40, 
    0x00, 0x90, 0xc0, 0x6a, 0xad, 0xe0, 
    0x20, 0xc0, 0x80, 0x37, 0x76, 0xa0, 
    0x20, 0x60, 0x80, 0x1a, 0xdb, 0x40, 
    0x00, 0x20, 0x80, 0x87, 0x6d, 0xf0, 
    0x20, 0x20, 0xc1, 0x05, 0xb6, 0xa0, 
    0x50, 0x02, 0x2d, 0x02, 0xda, 0xd0, 
    0x00, 0x00, 0x00, 0x01, 0x6b, 0x68, 
    0x00, 0x00, 0x35, 0x45, 0xb6, 0xb0, 
    0x00, 0x00, 0x18, 0x42, 0xdb, 0xd8, 
    0x00, 0x00, 0x08, 0x21, 0x2d, 0x68, 
    0x00, 0x00, 0x10, 0x60, 0xb6, 0xb0, 
    0x00, 0x00, 0x18, 0x20, 0xcb, 0xd8, 
    0x00, 0x00, 0x10, 0x40, 0x4d, 0x68, 
    0x00, 0x00, 0x1b, 0x00, 0x42, 0xb0, 
    0x00, 0x00, 0x09, 0x80, 0x65, 0xd8, 
    0x00, 0x00, 0x18, 0x80, 0x21, 0x68, 
    0x00, 0x00, 0x10, 0xc0, 0x34, 0xb0, 
    0x00, 0x00, 0x18, 0x20, 0x10, 0x58, 
    0x00, 0x00, 0x08, 0x30, 0x10, 0x28, 
    0x00, 0x00, 0x34, 0x18, 0x10, 0x10, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    int pulsador=0;

void setup() {
#ifdef __DEBUG__
  Serial.begin(9600);
  delay(100);
  Serial.println("Iniciando pantalla OLED");
#endif

  // Iniciar pantalla OLED en la dirección 0x3C
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
#ifdef __DEBUG__
    Serial.println("No se encuentra la pantalla OLED");
#endif
 pinMode(4, INPUT);           //declaramos el pin 4 como entrada
// pinMode(2, OUTPUT);
  }

  // Clear the buffer.
  display.clearDisplay();
  
  // Draw bitmap on the screen
  display.drawBitmap(40, 0, datos_imagen, 48, 46, SSD1306_WHITE);
  display.display();


}

void loop() {

      pulsador=digitalRead(4);
    if(pulsador==HIGH) {          //si el estado es pulsado
    
    pulsos=pulsos+1;
      //digitalWrite(2, HIGH);       //se enciende el led
      delay(100);
  }
//  else{                                   //si el estado es no pulsado
//    digitalWrite(2, LOW);       //se apaga el led
//  }

  // Protección overflow
  if (millis() < marcaTiempoDate) {
    marcaTiempoDate = millis();
  }

  // Comprobar is hay que actualizar tiempo
  if (millis() - marcaTiempoDate >= tiempoRefreshDate)
  {
    // Actualizar variables de tiempo
    millisToTiempo(millis());
    
    // Componer cadena con la información del tiempo formateada
    sprintf(cadenaTiempo, "%02d:%02d:%02d:%02d", dias, horas+pulsos, minutos, segundos);
    // Marca de tiempo
    marcaTiempoDate = millis();
  }
  
  // Limpiar texto tiempo
  display.fillRect(30,50,65,57,SSD1306_BLACK);
  // Dibujar texto tiempo
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);  
  display.setCursor(30, 50);
  display.println(cadenaTiempo);
 
  // Enviar a pantalla
  display.display();
  
  }
